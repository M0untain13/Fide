@page "/myimages"

@using Microsoft.AspNetCore.Authorization;
@using Fide.Blazor.Data;
@using Fide.Blazor.Services.FileStorage
@using Fide.Blazor.Services.AnalysisProxy
@using Fide.Blazor.Services.Data.UnitOfWork
@using Fide.Blazor.Components.Components
@using DTO.Analysis

@inject AuthenticationStateProvider ContextProvider
@inject IUnitOfWork uow
@inject IFileStorage storage
@inject IAnalysisProxy analysisClient
@attribute [Authorize]

<PageTitle>Мои изображения</PageTitle>

@if(ErrorMessage is not null){
    <div>
        @ErrorMessage
        <button @onclick="() => ErrorMessage = null">
            х
        </button>
    </div>
}

@if (CanSetPageNumber(1))
{
    <div>
        Страница:
        <InputNumber @bind-Value="VisibleImagePage"/>
    </div>
}

<InputFile OnChange="UploadImages" multiple accept=".jpg" />

@if (User is null)
{
    <p>Загрузка...</p>
}
else
{
    if (User.ImageLinks.Count == 0)
    {
        <p>У Вас пока что нет изображений</p>
    }
    else
    {
        <Grid Source="RenderImages">
            <Image 
            ImageLink="context" 
            OnDelete="DeleteImage" 
            OnAnalyze="AnalisysImage" 
            />
        </Grid>
    }
}

@code {
    private string? ErrorMessage { get; set; }
}

@code {
    private IEnumerable<ImageLink> RenderImages => User.ImageLinks.OrderBy(i => i.Created).Skip(AmountImagesByPage * ImagePage).Take(AmountImagesByPage);

    private ApplicationUser? User { get; set; }

    private int ImagePage { get; set; } = 0;

    public int VisibleImagePage 
    {
        get => ImagePage + 1;
        set {
            var newValue = value - 1;
            if (CanSetPageNumber(newValue))
            {
                ImagePage = newValue;
            }
        }
    }

    private int AmountImagesByPage { get; set; } = 12;

    private async Task UploadImages(InputFileChangeEventArgs e)
    {
        if (User is not null)
        {
            try
            {
                var files = e.GetMultipleFiles();

                var fileStreams = new List<Stream>();

                var users = uow.GetRepository<ApplicationUser>();
                var images = uow.GetRepository<ImageLink>();
                var maxbytes = 5120000;

                foreach (var file in files)
                {
                    if (file.ContentType == "image/jpeg"
                        && file.Size <= maxbytes)
                    {
                        var nameInBucket = await storage.UploadFileAsync(file.OpenReadStream(maxbytes), file.Name);
                        var image = new ImageLink()
                            {
                                OriginalName = nameInBucket,
                            };
                        await images.AddAsync(image);
                        User.ImageLinks.Add(image);
                        users.Update(User);
                    }
                }
                await uow.CommitAsync();
            }
            catch
            {
                uow.Rollback();
            }
        }
    }

    private async Task DeleteImage(ImageLink imageLink)
    {
        try
        {
            var users = uow.GetRepository<ApplicationUser>();
            var images = uow.GetRepository<ImageLink>();

            var user = imageLink.User;
            if (user is not null)
            {
                user.ImageLinks.Remove(imageLink);
                users.Update(user);
            }

            await storage.DeleteFileAsync(imageLink.OriginalName);
            if (imageLink.AnalysisName is not null)
            {
                await storage.DeleteFileAsync(imageLink.AnalysisName);
            }
            images.Remove(imageLink);

            await uow.CommitAsync();
        }
        catch
        {
            uow.Rollback();
        }

        if (!CanSetPageNumber(ImagePage))
        {
            ImagePage--;
        }
    }

    private async Task AnalisysImage(ImageLink imageLink)
    {
        if(imageLink.AnalysisName is null)
        {
            try
            {
                var request = new AnalysisRequest()
                {
                    // TODO: исправить захардкоженный бакет
                    BucketName = "filesbucket",
                    ObjectName = imageLink.OriginalName
                };
                var response = await analysisClient.SendAsync(request);
                imageLink.AnalysisName = response.ObjectName;
                imageLink.AnalysisResult = response.PredictedResult;
                imageLink.AnalysisRequested = DateTime.UtcNow;

                var images = uow.GetRepository<ImageLink>();
                images.Update(imageLink);
                await uow.CommitAsync();
            }
            catch
            {
                uow.Rollback();
            }
        }
    }

    private bool CanSetPageNumber(int number)
    {
        return User is not null && number >= 0 && User.ImageLinks.Count - (AmountImagesByPage * number) > 0;
    }

    protected override async Task OnInitializedAsync()
    {
        var context = await ContextProvider.GetAuthenticationStateAsync();
        var users = uow.GetRepository<ApplicationUser>();
        var name = context.User.Identity?.Name;
        User = (await users.FindAsync(u => u.UserName == name)).FirstOrDefault();
    }
}
