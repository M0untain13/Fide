@page "/myimages"

@using Microsoft.AspNetCore.Authorization;
@using System.Collections.Generic;
@using Fide.Blazor.Data;
@using Fide.Blazor.Services.ImageManager
@using Fide.Blazor.Services.Repositories.Base
@using Fide.Blazor.Components.Components

@inject AuthenticationStateProvider ContextProvider
@inject IUserRepository<ApplicationUser> users
@inject IImageManager ImageManager
@attribute [Authorize]

<PageTitle>Мои изображения</PageTitle>

@if (User is null)
{
    <p>Загрузка...</p>
}
else
{
    if (User.ImageLinks.Count == 0)
    {
        <p>У Вас пока что нет изображений</p>
    }
    else
    {
        <Grid Source="RenderImages" @ref="grid">
            <Image ImageLink="context" />
        </Grid>
    }
}

<InputFile OnChange="UploadImages" multiple />

<button @onclick="Left">left</button>
<button @onclick="Right">right</button>
<div>Страница @(ImagePage+1)</div>
<div>@(User.ImageLinks.Count - (AmountImagesByPage * (ImagePage + 1)))</div>

@code {
    private Grid<ImageLink>? grid;

    private IEnumerable<ImageLink> RenderImages => User.ImageLinks.Skip(AmountImagesByPage * ImagePage).Take(AmountImagesByPage);

    private ApplicationUser? User { get; set; }

    private int ImagePage { get; set; } = 0;

    private int AmountImagesByPage { get; set; } = 12;

    private async void UploadImages(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();

        var fileStreams = new List<Stream>();

        foreach(var file in files)
        {
            var image = await ImageManager.UploadImageAsync(file.OpenReadStream(), file.Name);
            User.ImageLinks.Add(image);
            users.Update(User);
            users.Save();
        }

        grid?.Update();
    }

    private void Left()
    {
        if (ImagePage > 0)
        {
            ImagePage--;
        }
    }

    private void Right()
    {
        if (User.ImageLinks.Count - (AmountImagesByPage * (ImagePage + 1)) > 0)
        {
            ImagePage++;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var context = await ContextProvider.GetAuthenticationStateAsync();
        User = users.Get(context.User.Identity.Name);
    }
}
