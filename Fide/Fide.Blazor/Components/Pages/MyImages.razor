@page "/myimages"

@using Microsoft.AspNetCore.Authorization;
@using System.Collections.Generic;
@using Fide.Blazor.Data;
@using Fide.Blazor.Services.FileStorage
@using Fide.Blazor.Services.Data.UnitOfWork
@using Fide.Blazor.Services.Repositories.Base
@using Fide.Blazor.Components.Components

@inject AuthenticationStateProvider ContextProvider
@inject IUnitOfWork uow
@inject IFileStorage storage
@attribute [Authorize]

<PageTitle>Мои изображения</PageTitle>

@if (IsCanLeft() || IsCanRight())
{
    <button @onclick="Left" disabled="@(!IsCanLeft())">left</button>
    <button @onclick="Right" disabled="@(!IsCanRight())">right</button>
    <div>Страница @(ImagePage + 1)</div>
}

<InputFile OnChange="UploadImages" multiple accept=".jpg" class="inputfile-text" />

@if (User is null)
{
    <p>Загрузка...</p>
}
else
{
    if (User.ImageLinks.Count == 0)
    {
        <p>У Вас пока что нет изображений</p>
    }
    else
    {
        <Grid Source="RenderImages" @ref="grid">
            <Image ImageLink="context" OnDelete="DeleteImage" />
        </Grid>
    }
}

@code {
    private Grid<ImageLink>? grid;

    private IEnumerable<ImageLink> RenderImages => User.ImageLinks.Skip(AmountImagesByPage * ImagePage).Take(AmountImagesByPage);

    private ApplicationUser? User { get; set; }

    private int ImagePage { get; set; } = 0;

    private int AmountImagesByPage { get; set; } = 12;

    private async Task UploadImages(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();

        var fileStreams = new List<Stream>();

        var users = uow.GetRepository<ApplicationUser>();
        var images = uow.GetRepository<ImageLink>();
        foreach(var file in files)
        {
            if (file.ContentType == "image/jpeg")
            {
                var nameInBucket = await storage.UploadFileAsync(file.OpenReadStream(), file.Name);
                var image = new ImageLink()
                {
                    Url = nameInBucket,
                };
                await images.AddAsync(image);
                User.ImageLinks.Add(image);
                users.Update(User);
            }
        }
        await uow.CommitAsync();

        grid?.Update();
    }

    private async Task DeleteImage(ImageLink imageLink)
    {
        var users = uow.GetRepository<ApplicationUser>();
        var images = uow.GetRepository<ImageLink>();

        User.ImageLinks.Remove(imageLink);
        users.Update(User);

        await storage.DeleteFileAsync(imageLink.Url);
        images.Remove(imageLink);

        await uow.CommitAsync();

        if(IsCanLeft() && User.ImageLinks.Count - (AmountImagesByPage * ImagePage) == 0)
        {
            Left();
        }

        grid?.Update();
    }

    private bool IsCanLeft() => ImagePage > 0;
    private bool IsCanRight() => User is not null ? User.ImageLinks.Count - (AmountImagesByPage * (ImagePage + 1)) > 0 : false;

    private void Left()
    {
        if (IsCanLeft())
        {
            ImagePage--;
        }
    }

    private void Right()
    {
        if (IsCanRight())
        {
            ImagePage++;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var context = await ContextProvider.GetAuthenticationStateAsync();
        var users = uow.GetRepository<ApplicationUser>();
        var name = context.User.Identity?.Name;
        User = (await users.FindAsync(u => u.UserName == name)).FirstOrDefault();
    }
}
