@using Fide.Blazor.Data;

@using Fide.Blazor.Services.FileStorage

@inject IFileStorage storage

<div class="image-frame">
    @if (PresignedOriginalUrl is not null)
    {
        <div class="image-container">
            <img src="@PresignedOriginalUrl" alt="Main image" class="displayed-image" />
            @if (PresignedAnalysisUrl is not null)
            {
                <img src="@PresignedAnalysisUrl" alt="Second image" class="displayed-image" />
            }
        </div>

        <div class="button-group">
            <button @onclick="DeleteImage" class="action-button delete-button">
                Удалить
            </button>
            @if(PresignedAnalysisUrl is null)
            {
                <button @onclick="AnalyzeImage" class="action-button analyze-button">
                    Анализ
                </button>
            }
        </div>
    }
    else
    {
        <div class="no-image">No image to display</div>
    }
</div>

@code {
    private string? PresignedOriginalUrl { get; set; }
    private string? PresignedAnalysisUrl { get; set; }

    private Guid LastGuid { get; set; }

    [Parameter]
    public required ImageLink ImageLink { get; set; }

    [Parameter]
    public EventCallback<ImageLink> OnDelete { get; set; }

    [Parameter]
    public EventCallback<ImageLink> OnAnalyze { get; set; }

    private async Task DeleteImage()
    {
        await OnDelete.InvokeAsync(ImageLink);
    }

    private async Task AnalyzeImage()
    {
        await OnAnalyze.InvokeAsync(ImageLink);
        PresignedAnalysisUrl = await storage.GeneratePresignedUrl(ImageLink.AnalysisName, new TimeSpan(1, 0, 0));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (LastGuid != ImageLink.Id)
        {
            PresignedOriginalUrl = null;
            PresignedAnalysisUrl = null;
        }
        LastGuid = ImageLink.Id;

        PresignedOriginalUrl = await storage.GeneratePresignedUrl(ImageLink.OriginalName, new TimeSpan(1, 0, 0));

        var analysisName = ImageLink.AnalysisName;
        if (analysisName is not null)
        {
            PresignedAnalysisUrl = await storage.GeneratePresignedUrl(analysisName, new TimeSpan(1, 0, 0));
        }
        else
        {
            PresignedAnalysisUrl = null;
        }
    }
}